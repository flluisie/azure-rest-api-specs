{
  "swagger": "2.0",
  "info": {
    "version": "1.1-preview",
    "title": "Form Recognizer Client",
    "description": "Extracts information from forms and images into structured data based on a model created by a set of representative training forms."
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/formrecognizer/v1.1-preview",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "#/parameters/Endpoint"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "paths": {
    "/custom/asyncTrain": {
      "post": {
        "summary": "Train Custom Model",
        "description": "Create and train a custom model. The train request must include a source parameter that is either an externally accessible Azure Storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration\r\n setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be directly under the source folder. Subfolders are not supported. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg' and 'image/png'.\"\r\n Other type of content is ignored.",
        "operationId": "AsyncTrainCustomModel",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trainRequest",
            "in": "body",
            "description": "Request object for training.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrainRequest"
            }
          },
          {
            "name": "labelFile",
            "in": "query",
            "description": "Specify if label file should be used for training.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "yes",
                "no"
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Train request successfully queued.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "Operation location with an operation id used to track the progress of training. The returned id is the operation id, not trained model id. Trained model id can be obtained only when the operation status becomes \"succeeded\" in OperationStatus - Get."
              }
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Train Batch new model example": {
            "$ref": "./examples/TrainBatch.json"
          },
          "Train Batch new model example, subfolder filter options": {
            "$ref": "./examples/TrainBatchWithSubFolders.json"
          }
        }
      }
    },
    "/custom/asyncTrainResult/{id}": {
      "get": {
        "summary": "Get Train Result",
        "description": "Retrieve train operation status and related results.",
        "operationId": "GetTrainOperationResult",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Train operation identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AsyncTrainResult"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Keys from Model": {
            "$ref": "./examples/GetOperationResult.json"
          }
        }
      }
    },
    "/custom/TrainOperations": {
      "get": {
        "summary": "List Train Operations",
        "description": "Retrieve list of train operations.",
        "operationId": "GetTrainOperationsList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AsyncTrainOperationsList"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Keys from Model": {
            "$ref": "./examples/GetOperationResult.json"
          }
        }
      }
    },
    "/custom/models/{id}/asyncAnalyze": {
      "post": {
        "summary": "Analyze Form",
        "description": "Extract key-value pairs from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg' or 'image/png'. A success response is returned in JSON.",
        "operationId": "AsyncAnalyzeWithCustomModel",
        "consumes": [
          "application/pdf",
          "image/jpeg",
          "image/png",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model Identifier to analyze the document with.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includeOcrResults",
            "in": "query",
            "description": "Include OCR results in results.",
            "required": false,
            "type": "boolean"
          },          
          {
            "name": "keys",
            "in": "query",
            "description": "An optional list of known keys to extract the values for.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": false
          },
          {
            "name": "form_stream",
            "in": "formData",
            "description": "A pdf document or image (jpg,png) file to analyze.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "202": {
            "description": "Analyze request queued successfully.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "Operation location with an operation id used to track the progress of analyze operation. The returned id is the operation id. Result of analyze operation can be obtained only when the operation status becomes \"succeeded\" in OperationStatus - Get."
              }
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Model from id": {
            "$ref": "./examples/AnalyzeBatch.json"
          }
        }
      }
    },
    "/custom/asyncAnalyzeResult/{id}": {
      "get": {
        "summary": "Get Analyze Result",
        "description": "Retrieve Analyze operation status.",
        "operationId": "GetAnalyzeOperationResult",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Batch Analyze operation identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AsyncAnalyzeResult"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Keys from Model": {
            "$ref": "./examples/GetOperationResult.json"
          }
        }
      }
    },
    "/custom/AnalyzeOperations": {
      "get": {
        "summary": "List Analyze Operations",
        "description": "Retrieve list of batch operations and related results.",
        "operationId": "GetAnalyzeOperationsList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AsyncAnalyzeOperationsList"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Keys from Model": {
            "$ref": "./examples/GetOperationResult.json"
          }
        }
      }
    },    
    "/custom/models": {
      "get": {
        "summary": "List Custom Models",
        "description": "Get information about all trained custom models",
        "operationId": "GetCustomModels",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelsResult"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Model from id": {
            "$ref": "./examples/GetModels.json"
          }
        }
      }
    },
    "/custom/models/{id}": {
      "get": {
        "summary": "Get Custom Model",
        "description": "Get information about a model.",
        "operationId": "GetCustomModel",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Model identifier.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "keys",
            "in": "query",
            "description": "Get keys extracted by this model.",
            "required": false
          }          
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ModelResult"
            }
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Model from id": {
            "$ref": "./examples/GetModel.json"
          }
        }
      },
      "delete": {
        "summary": "Delete Custom Model",
        "description": "Delete model artifacts.",
        "operationId": "DeleteCustomModel",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the model to delete.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed model artifacts."
          },
          "default": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Model from id": {
            "$ref": "./examples/DeleteModel.json"
          }
        }
      }
    }    
  },
  "definitions": {
    "AsyncTrainResult": {
      "description": "Status and result of batch operation.",
      "type": "object",
      "properties": {
          "status": {
            "description": "Get status of batch operation.",
            "enum": [
              "NotStarted",
              "Running",
              "Succeeded",
              "Failed"
            ],
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Get date time the batch operation was submitted.",
            "type": "string"
          },
          "lastUpdatedDateTime": {
            "format": "date-time",
            "description": "Get last updated date time of this batch operation.",
            "type": "string"
          },
          "trainBatchResult": { 
            "description": "Train batch operation result.",
            "$ref": "#/definitions/TrainResult"
          }
	    }
    },
    "AsyncAnalyzeResult": {
      "description": "Status and result of batch operation.",
      "type": "object",
      "properties": {
          "status": {
            "description": "Get status of batch operation.",
            "enum": [
              "NotStarted",
              "Running",
              "Succeeded",
              "Failed"
            ],
            "type": "string"
          },
          "createdDateTime": {
            "format": "date-time",
            "description": "Get date time the batch operation was submitted.",
            "type": "string"
          },
          "lastUpdatedDateTime": {
            "format": "date-time",
            "description": "Get last updated date time of this batch operation.",
            "type": "string"
          },
          "analyzeBatchResult": {  
            "description": "Analyze batch operation result.",
            "$ref": "#/definitions/AnalyzeResult"
          }
       }
    },
    "TrainRequest": {
      "description": "Contract to initiate a train request.",
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "description": "Get or set source path.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "sourceFilter": {
          "$ref": "#/definitions/TrainSourceFilter",
          "description": "Get or set filter to further search the\r\nsource path for content."
        }
      }
    },
    "TrainSourceFilter": {
      "description": "Filters to be applied when traversing a data source.",
      "type": "object",
      "properties": {
        "prefix": {
          "description": "A case-sensitive prefix string to filter content\r\nunder the source location. For e.g., when using a Azure Blob\r\nUri use the prefix to restrict subfolders for content.",
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "includeSubFolders": {
          "description": "A flag to indicate if sub folders within the set of\r\nprefix folders will also need to be included when searching\r\nfor content to be preprocessed.",
          "type": "boolean"
        }
      }
    },
    "TrainResult": {
      "description": "Response of the Train API call.",
      "type": "object",
      "properties": {
        "modelId": {
          "description": "Identifier of the model.",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        },
        "trainingDocuments": {
          "description": "List of documents used to train the model and the\r\ntrain operation error reported by each.",
          "required": false,
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormDocumentReport"
          }
        },
        "trainingFields": {
          "description": "Training Fields.",
          "required": false,
          "type": "object",
          "properties":{
            "fields": {
              "description": "List of fields used to train the model and the\r\ntrain operation error reported by each.",
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormFieldsReport"
              }   
            }, 
            "averageModelAccuracy":{
              "description": "Average accuracy.",
              "type": "string"
            }
          },       
        },
        "errors": {
          "description": "Errors returned during the training operation.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormOperationError"
          }
        }
      }
    },
    "KeysResult": {
      "description": "Keys extracted by a model.",
      "type": "object",
      "properties": {
        "clusters": {
          "description": "Object mapping ClusterIds to Key lists.",
          "type": "object",
          "additionalProperties": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "AsyncOperation": {
      "description": "Operation details.",
      "type":"object",
      "properties": {
        "operationId": {
          "description": "Get or set train operation identifier.",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        },      
        "status": {
          "description": "Get or set the status of operation.",
          "enum": [
            "created",
            "inprogress",
            "completed",
            "tombestoned"
          ],
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Get or set the created date time of the operation.",
          "type": "string"
        }
      }
    },
    "AsyncTrainOperationsList": {
      "description": "Result of a train operation status.",
      "type": "object",
      "properties": {
        "operations": {
          "uniqueItems":false,
          "type":"array",
          "items": {
            "$ref": "#/definitions/AsyncOperation"
          }
        }
      }
    },
    "AsyncAnalyzeOperationsList": {
      "description": "Result of a analyze operation status.",
      "type": "object",
      "properties": {
        "operations": {
          "uniqueItems":false,
          "type":"array",
          "items": {
            "$ref": "#/definitions/AsyncOperation"
          }
        }
      }
    },    
    "ModelResult": {
      "description": "Result of a model status query operation.",
      "type": "object",
      "properties": {
        "modelId": {
          "description": "Get or set model identifier.",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        },
        "status": {
          "description": "Get or set the status of model.",
          "enum": [
            "created",
            "ready",
            "invalid"
          ],
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Get or set the created date time of the model.",
          "type": "string"
        },
        "lastUpdatedDateTime": {
          "format": "date-time",
          "description": "Get or set the model last updated datetime.",
          "type": "string"
        },
        "Keys": {
          "$ref": "#/definitions/KeysResult",
          "description": "Keys extracted by model.",
          "required": false
        }        
      }
    },
    "ModelsResult": {
      "description": "Result of query operation to fetch multiple models.",
      "type": "object",
      "properties": {
        "models": {
          "description": "Collection of models.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelResult"
          }
        },
        "nextLink": {
          "description": "Next link",
          "required": false,
          "type": "string"
        }
      }
    },
    "FormDocumentReport": {
      "type": "object",
      "properties": {
        "documentName": {
          "description": "Reference to the data that the report is for.",
          "type": "string"
        },
        "pages": {
          "format": "int32",
          "description": "Total number of pages trained on.",
          "type": "integer"
        },
        "errors": {
          "description": "List of errors per page.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "Status of the training operation.",
          "enum": [
            "success",
            "partialSuccess",
            "failure"
          ],
          "type": "string"
        }
      }
    },
    "FormFieldsReport": {
      "type": "object",
      "properties": {
        "fieldName": {
          "description": "Field Name to be extracted.",
          "type": "string"
        },
        "accuracy": {
          "description": "Accuracy of extracted label data.",
          "type": "string"
        }
      }
    },    
    "FormOperationError": {
      "description": "Error reported during an operation.",
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "Message reported during the train operation.",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorInformation"
        }
      }
    },
    "ErrorInformation": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "innerError": {
          "$ref": "#/definitions/InnerError"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InnerError": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string"
        }
      }
    },
    "AnalyzeResult": {
      "description": "Analyze API call result.",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version of schema used for this result.",
          "type": "string"
        },
        "recognitionResults": {
          "description": "Page level information extracted in the analyzed\r\ndocument.",
          "uniqueItems": false,
          "required": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/OCRResults"
          }
        },
        "pageResults": {
          "description": "Page level information extracted in the analyzed\r\ndocument.",
          "uniqueItems": false,
          "required": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedPage"
          }
        },
        "documentResults": {
          "description": "Page level information extracted in the analyzed\r\ndocument.",
          "uniqueItems": false,
          "required": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedDocument"
          }
        },
        "errors": {
          "description": "List of errors reported during the analyze\r\noperation.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormOperationError"
          }
        }
      }
    },
    "ExtractedPage": {
      "description": "Extraction information of a single page in a\r\nwith a document.",
      "type": "object",
      "properties": {
        "number": {
          "format": "int32",
          "description": "Page number.",
          "type": "integer"
        },
        "height": {
          "format": "int32",
          "description": "Height of the page (in pixels).",
          "type": "integer"
        },
        "width": {
          "format": "int32",
          "description": "Width of the page (in pixels).",
          "type": "integer"
        },
        "clusterId": {
          "format": "int32",
          "description": "Cluster identifier.",
          "type": "integer"
        },
        "keyValuePairs": {
          "description": "List of Key-Value pairs extracted from the page.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedKeyValuePair"
          }
        },
        "tables": {
          "description": "List of Tables and their information extracted from the page.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedTable"
          }
        }
      }
    },
    "ExtractedKeyValuePair": {
      "description": "Representation of a key-value pair as a list\r\nof key and value tokens.",
      "type": "object",
      "properties": {
        "key": {
          "description": "List of tokens for the extracted key in a key-value pair.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedToken"
          }
        },
        "value": {
          "description": "List of tokens for the extracted value in a key-value pair.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedToken"
          }
        }
      }
    },
    "ExtractedTable": {
      "description": "Extraction information about a table\r\ncontained in a page.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Table identifier.",
          "type": "string"
        },
        "columns": {
          "description": "List of columns contained in the table.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedTableColumn"
          }
        }
      }
    },
    "ExtractedToken": {
      "description": "Canonical representation of single extracted text.",
      "type": "object",
      "properties": {
        "text": {
          "description": "String value of the extracted text.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the extracted text. Represents the\r\nlocation of the extracted text as a pair of\r\ncartesian co-ordinates. The co-ordinate pairs are arranged by\r\ntop-left, top-right, bottom-right and bottom-left endpoints box\r\nwith origin reference from the bottom-left of the page.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "double",
            "type": "number"
          }
        },
        "confidence": {
          "format": "double",
          "description": "A measure of accuracy of the extracted text.",
          "type": "number"
        }
      }
    },
    "ExtractedTableColumn": {
      "description": "Extraction information of a column in\r\na table.",
      "type": "object",
      "properties": {
        "header": {
          "description": "List of extracted tokens for the column header.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtractedToken"
          }
        },
        "entries": {
          "description": "Extracted text for each cell of a column. Each cell\r\nin the column can have a list of one or more tokens.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExtractedToken"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Endpoint": {
      "name": "Endpoint",
      "description": "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com).",
      "x-ms-parameter-location": "client",
      "required": true,
      "type": "string",
      "in": "path",
      "x-ms-skip-url-encoding": true
    }
  }
}
